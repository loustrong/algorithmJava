package com.tom.athome.crazyit.chapter18.chapter1801;

/**
 * A
 *
 * @author Tom on 2021/1/23
 */
public class A
{
    /**
     * 当调用java命令运行某个Java程序时,该命令将启动一个Java虚拟机进程,
     * 不管该Java程序有多么复杂,该程序启动了多少个线程,它们都处于该Java
     * 虚拟机进程里面.正如前面介绍的,同一个JVM的所有线程,所有变量都处于同一个进程里面.
     * 他们都使用该JVM进程的内存区.当系统出现如下情况时,JVM进程将被终止
     * 1. 程序运行到最后正常结束;
     * 2. 程序运行到使用System.exit()或者Runtime.getRuntime().exit()代码处结束程序
     * 3. 程序执行过程中遇到未捕获的异常或错误而结束
     * 4. 程序所在平台强制结束了JVM进程
     * 类的加载:
     * 当程序主动使用某个类时,如果该类还未加载到内存中,
     * 则系统会通过加载,连接和初始化三个步骤来对该类进行初始化;
     * 类的加载是指将类的class文件读入内存,并为之创建一个java.lang.Class对象.
     * 也就是说,当程序使用任何类时,系统都会为之建立一个java.lang.Class对象
     * 类的加载是由类加载器完成,类的加载器通常是由JVM提供,这些类的加载器
     * 也是前面所有程序运行的基础,JVM提供的这些类加载器通常称之为类加载器.
     * 除此之外,开发者可以通过继承ClassLoader基类来创建自己的类加载器
     * Java虚拟机规范允许系统预先加载某些类
     * 类的连接:
     * 当类被加载之后,系统为之生成一个对应的Class对象,接着将会进入连接阶段,
     * 连接阶段负责把类的二进制数据合并到JRE中.
     * 类的连接分为如下三个阶段:
     * 验证: 验证阶段用于检查被加载的类是否是正确的内部结构,并和其他类协调一致
     * 准备: 准备阶段是为类变量分配内存,并设置默认初始值
     * 解析: 将类的二进制数据中的符号引用直接替换成直接引用
     *
     * 类的初始化
     * 主要是对类变量进行初始化
     * 1. 声明类变量时指定初始值
     * 2. 使用静态初始化块为类变量指定初始值
     */
    public static int a = 6;
}
